–∑—É–ø–∏–Ω—è—î–º–æ—Å—è –Ω–∞ NiFTa —Å–∞–º–µ —É —Ç–∞–∫–æ–º—É –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ —â–æ–± –≤–∏–¥—ñ–ª–∏—Ç–∏ —Å–ª–æ–≤–æ NFT, –∑–∞—Ç–≤–µ—Ä–¥–∂—É—é —Ü—é –Ω–∞–∑–≤—É, –º–æ–∂–µ—à —ó—ó –≤—Å—é–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–¥–∞–ª—ñ. —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π –∫–∞—Ä–∫–∞—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é (–ø–∞–ø–∫–∏/—Ñ–∞–π–ª–∏/—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏/—Å—Ö–µ–º–∏ subgraph) —ñ —Å—Ç–∞—Ä—Ç–æ–≤—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏ 
ChatGPT said:
Thought for 8s

–ß—É–¥–æ–≤–æ ‚Äî —Ñ—ñ–∫—Å—É—î–º–æ –Ω–∞–∑–≤—É NiFTa (—Å–∞–º–µ –∑ –≤–µ–ª–∏–∫–æ—é NFT —É—Å–µ—Ä–µ–¥–∏–Ω—ñ). –ù–∏–∂—á–µ –¥–∞—é –∫–∞—Ä–∫–∞—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –∑ –ø–∞–ø–∫–∞–º–∏/—Ñ–∞–π–ª–∞–º–∏, —Å—Ç–∞—Ä—Ç–æ–≤–∏–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏, —Å—Ö–µ–º–æ—é —Å—É–±–≥—Ä–∞—Ñ–∞ –π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º (Next.js + wagmi/viem + RainbowKit) –¥–ª—è Base. –¶–µ ¬´–æ–ø–æ—Ä–Ω–∏–π¬ª —à–∞–±–ª–æ–Ω: –º–æ–∂–Ω–∞ –æ–¥—Ä–∞–∑—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–ø–æ –π –ø–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–∫—É.

üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é NiFTa
nifta/
‚îú‚îÄ README.md
‚îú‚îÄ .gitignore
‚îú‚îÄ .env.example
‚îú‚îÄ package.json
‚îú‚îÄ pnpm-lock.yaml           # (–∑–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è)
‚îú‚îÄ hardhat.config.ts
‚îú‚îÄ foundry.toml             # –æ–ø—Ü—ñ–π–Ω–æ, —è–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ Foundry
‚îú‚îÄ scripts/
‚îÇ  ‚îú‚îÄ deploy_factory.ts
‚îÇ  ‚îú‚îÄ deploy_marketplace.ts
‚îÇ  ‚îî‚îÄ verify.ts
‚îú‚îÄ contracts/
‚îÇ  ‚îú‚îÄ factory/
‚îÇ  ‚îÇ  ‚îî‚îÄ NiftaFactory.sol
‚îÇ  ‚îú‚îÄ collection/
‚îÇ  ‚îÇ  ‚îú‚îÄ NiftaCollection1155.sol
‚îÇ  ‚îÇ  ‚îî‚îÄ INiftaCollection.sol
‚îÇ  ‚îú‚îÄ marketplace/
‚îÇ  ‚îÇ  ‚îî‚îÄ NiftaMarketplace.sol
‚îÇ  ‚îú‚îÄ libs/
‚îÇ  ‚îÇ  ‚îî‚îÄ PaymentSplitterLike.sol  # –ø—Ä–æ—Å—Ç–∏–π pull-–ø—É–ª –¥–ª—è –≤–∏–ø–ª–∞—Ç (–º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ 0xSplits)
‚îÇ  ‚îî‚îÄ interfaces/
‚îÇ     ‚îú‚îÄ INiftaFactory.sol
‚îÇ     ‚îú‚îÄ INiftaMarketplace.sol
‚îÇ     ‚îî‚îÄ CommonEvents.sol
‚îú‚îÄ test/
‚îÇ  ‚îú‚îÄ NiftaCollection.t.sol       # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å Foundry
‚îÇ  ‚îú‚îÄ NiftaCollection.spec.ts     # –∞–±–æ Hardhat+TS
‚îÇ  ‚îú‚îÄ NiftaMarketplace.spec.ts
‚îÇ  ‚îî‚îÄ NiftaFactory.spec.ts
‚îú‚îÄ subgraph/
‚îÇ  ‚îú‚îÄ subgraph.yaml
‚îÇ  ‚îú‚îÄ schema.graphql
‚îÇ  ‚îî‚îÄ src/
‚îÇ     ‚îú‚îÄ mapping.ts
‚îÇ     ‚îî‚îÄ utils.ts
‚îî‚îÄ apps/web/                      # —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (Next.js 14 / App Router)
   ‚îú‚îÄ next.config.mjs
   ‚îú‚îÄ package.json
   ‚îú‚îÄ tsconfig.json
   ‚îú‚îÄ .env.local.example
   ‚îú‚îÄ public/
   ‚îÇ  ‚îî‚îÄ og.png
   ‚îî‚îÄ src/
      ‚îú‚îÄ app/
      ‚îÇ  ‚îú‚îÄ layout.tsx
      ‚îÇ  ‚îú‚îÄ page.tsx                # Trending
      ‚îÇ  ‚îú‚îÄ explore/page.tsx
      ‚îÇ  ‚îú‚îÄ sale/page.tsx
      ‚îÇ  ‚îú‚îÄ create/page.tsx         # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó
      ‚îÇ  ‚îî‚îÄ frame/route.ts          # Farcaster Mini App endpoint (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä)
      ‚îú‚îÄ components/
      ‚îÇ  ‚îú‚îÄ wallet/WalletProvider.tsx
      ‚îÇ  ‚îú‚îÄ cards/TrendingCard.tsx
      ‚îÇ  ‚îú‚îÄ cards/ExploreCard.tsx
      ‚îÇ  ‚îî‚îÄ cards/SaleCard.tsx
      ‚îú‚îÄ lib/
      ‚îÇ  ‚îú‚îÄ chains.ts
      ‚îÇ  ‚îú‚îÄ wagmi.ts
      ‚îÇ  ‚îú‚îÄ subgraph.ts
      ‚îÇ  ‚îî‚îÄ utils.ts
      ‚îî‚îÄ styles/globals.css

‚öôÔ∏è package.json (–∫–æ—Ä—ñ–Ω—å)
{
  "name": "nifta-monorepo",
  "private": true,
  "workspaces": [
    "apps/web"
  ],
  "scripts": {
    "dev:web": "pnpm -C apps/web dev",
    "build:web": "pnpm -C apps/web build",
    "start:web": "pnpm -C apps/web start",
    "chain": "hardhat node",
    "test": "hardhat test",
    "lint": "eslint ."
  },
  "devDependencies": {
    "@types/node": "^20.12.12",
    "typescript": "^5.4.5",
    "eslint": "^9.7.0",
    "@nomicfoundation/hardhat-toolbox": "^5.0.0",
    "@openzeppelin/contracts": "^5.0.1",
    "@openzeppelin/contracts-upgradeable": "^5.0.1",
    "hardhat": "^2.22.5",
    "dotenv": "^16.4.5"
  }
}

.env.example
RPC_BASE_MAINNET=https://mainnet.base.org
PRIVATE_KEY=0xabc...                # –¥–µ–ø–ª–æ–π-–∫–ª—é—á
ETHERSCAN_API_KEY=...               # –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (BaseScan)
PLATFORM_TREASURY=0xYourPlatform... # –∞–¥—Ä–µ—Å–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è –∫–æ–º—ñ—Å—ñ–π

üîê –°—Ç–∞—Ä—Ç–µ—Ä-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏
–ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó ‚Äî contracts/interfaces/CommonEvents.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

interface CommonEvents {
    event CollectionCreated(address indexed collection, address indexed creator, string uri, uint256 priceWei);
    event TimerStarted(address indexed collection, uint256 endTime);
    event MintPaid(address indexed collection, address indexed minter, uint256 id, uint256 amount, uint256 value, address referrer);
    event FirstPaidMinterSet(address indexed collection, address indexed firstMinter);
    event Listed(address indexed collection, uint256 indexed tokenId, address indexed seller, uint256 amount, uint256 unitPrice);
    event Purchase(address indexed collection, uint256 indexed tokenId, address indexed buyer, uint256 amount, uint256 totalPaid);
    event Cancel(address indexed collection, uint256 indexed tokenId, address indexed seller);
}

–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–ª–µ–∫—Ü—ñ—ó ‚Äî contracts/collection/INiftaCollection.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

interface INiftaCollection {
    function initialize(
        address creator_,
        address platformReceiver_,
        string memory uri_,
        uint256 priceWei_,
        uint256 maxPaidMintsTrigger_
    ) external;

    function creatorFreeMint(uint256 id, uint256 amount) external;
    function mint(uint256 id, uint256 amount, address referrer) external payable;

    function priceWei() external view returns (uint256);
    function endTime() external view returns (uint256);
    function firstPaidMinter() external view returns (address);
    function platformReceiver() external view returns (address);
    function creator() external view returns (address);
}

–ö–æ–ª–µ–∫—Ü—ñ—è ERC-1155 ‚Äî contracts/collection/NiftaCollection1155.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {ERC1155} from "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import {ERC1155Supply} from "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol";
import {ERC2981} from "@openzeppelin/contracts/token/common/ERC2981.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import {Pausable} from "@openzeppelin/contracts/utils/Pausable.sol";

import {INiftaCollection} from "./INiftaCollection.sol";

/**
 * NiFTa Collection (ERC-1155)
 * - —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞ 0.0001 ETH
 * - –ø–µ—Ä—à–∏–π –º—ñ–Ω—Ç —Ç–≤–æ—Ä—Ü—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π
 * - –ø—ñ—Å–ª—è 1000 –ø–ª–∞—Ç–Ω–∏—Ö –º—ñ–Ω—Ç—ñ–≤ —Å—Ç–∞—Ä—Ç—É—î 48 –≥–æ–¥ —Ç–∞–π–º–µ—Ä
 * - —Ä–æ–∑–ø–æ–¥—ñ–ª: Creator 50%, FirstPaidMinter 10%, Referral 20% (–∞–±–æ 0% ‚Üí –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞), Platform 20% (–∞–±–æ 40%)
 * - —Ä–æ—è–ª—Ç—ñ —á–µ—Ä–µ–∑ ERC-2981: 2.5% –∫—Ä–µ–∞—Ç–æ—Ä—É; 2.5% –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ —Ä–µ–∞–ª—ñ–∑—É—î –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
 */
contract NiftaCollection1155 is
    ERC1155,
    ERC1155Supply,
    ERC2981,
    Ownable,
    ReentrancyGuard,
    Pausable,
    INiftaCollection
{
    uint256 public constant ROYALTY_BPS = 250; // 2.5% creator via ERC-2981
    uint256 public constant FIRST_TRIGGER = 1000; // 1000 paid mints
    uint256 public constant DURATION = 48 hours;

    address public creator;
    address public platformReceiver;
    uint256 public priceWei; // 0.0001 ether
    uint256 public maxPaidMintsTrigger;

    address public firstPaidMinter;
    uint256 public paidMints; // —Ä–∞—Ö—É—î–º–æ –ª–∏—à–µ –ø–ª–∞—Ç–Ω—ñ –º—ñ–Ω—Ç–∏
    uint256 public override endTime; // 0 –ø–æ–∫–∏ —Ç–∞–π–º–µ—Ä –Ω–µ —Å—Ç–∞—Ä—Ç—É–≤–∞–≤

    bool public creatorMintedFree;

    // Pull-–ø–µ–π–º–µ–Ω—Ç–∏ (–ø—Ä–æ—Å—Ç–∏–π –±–∞–ª–∞–Ω—Å, –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ 0xSplits)
    mapping(address => uint256) public claimable;

    error MintClosed();
    error FreeMintUsed();
    error WrongValue();
    error ZeroAmount();
    error RefEqualsMinter();

    constructor() ERC1155("") {
        // –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–æ–ª–µ–∫—Ü—ñ—ó —î creator (–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ initialize —á–µ—Ä–µ–∑ transferOwnership)
    }

    function initialize(
        address creator_,
        address platformReceiver_,
        string memory uri_,
        uint256 priceWei_,
        uint256 maxPaidMintsTrigger_
    ) external override {
        require(creator == address(0), "Already initialized");
        require(creator_ != address(0) && platformReceiver_ != address(0), "Zero addr");

        creator = creator_;
        platformReceiver = platformReceiver_;
        priceWei = priceWei_;
        maxPaidMintsTrigger = maxPaidMintsTrigger_ == 0 ? FIRST_TRIGGER : maxPaidMintsTrigger_;

        _setURI(uri_);
        _setDefaultRoyalty(creator_, ROYALTY_BPS);
        _transferOwnership(creator_); // Ownable
    }

    function creatorFreeMint(uint256 id, uint256 amount) external override whenNotPaused nonReentrant {
        require(msg.sender == creator, "Only creator");
        if (creatorMintedFree) revert FreeMintUsed();
        if (amount == 0) revert ZeroAmount();

        creatorMintedFree = true;
        _mint(creator, id, amount, "");
    }

    function mint(uint256 id, uint256 amount, address referrer)
        external
        payable
        override
        whenNotPaused
        nonReentrant
    {
        if (amount == 0) revert ZeroAmount();
        if (endTime != 0 && block.timestamp >= endTime) revert MintClosed();
        if (msg.value != priceWei * amount) revert WrongValue();
        if (referrer == msg.sender) revert RefEqualsMinter();

        // –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–µ—Ä—à–æ–≥–æ –ø–ª–∞—Ç–Ω–æ–≥–æ –º—ñ–Ω—Ç–µ—Ä–∞
        if (firstPaidMinter == address(0)) {
            firstPaidMinter = msg.sender;
            emit FirstPaidMinterSet(address(this), msg.sender);
        }

        _mint(msg.sender, id, amount, "");

        // —Ä–æ–∑–ø–æ–¥—ñ–ª
        // –ë–∞–∑–æ–≤–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤—ñ–¥ msg.value:
        //  - Creator 50%
        //  - FirstPaidMinter 10%
        //  - Referral 20% (–∞–±–æ 0% ‚Üí –ø—ñ–¥–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ)
        //  - Platform 20% (+ –Ω–µ–≤–∏–∫–æ—Ä. 20% —Ä–µ—Ñ–µ—Ä–∞–ª–∞)
        uint256 total = msg.value;
        uint256 toCreator = (total * 50) / 100;
        uint256 toFirst = (total * 10) / 100;

        uint256 toReferral = 0;
        uint256 toPlatform = (total * 20) / 100;

        if (referrer != address(0)) {
            toReferral = (total * 20) / 100;
        } else {
            // –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —á–∞—Å—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ‚Üí –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ
            toPlatform += (total * 20) / 100;
        }

        // –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —É pull-–±–∞–ª–∞–Ω—Å (safe pattern)
        claimable[creator] += toCreator;
        claimable[firstPaidMinter] += toFirst;
        if (toReferral > 0) claimable[referrer] += toReferral;
        claimable[platformReceiver] += toPlatform;

        // –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–ª–∞—Ç–Ω–∏—Ö –º—ñ–Ω—Ç—ñ–≤ —ñ –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        paidMints += amount;
        if (endTime == 0 && paidMints >= maxPaidMintsTrigger) {
            endTime = block.timestamp + DURATION;
            emit TimerStarted(address(this), endTime);
        }

        emit MintPaid(address(this), msg.sender, id, amount, total, referrer);
    }

    function claim() external nonReentrant {
        uint256 bal = claimable[msg.sender];
        require(bal > 0, "Nothing to claim");
        claimable[msg.sender] = 0;
        (bool ok, ) = payable(msg.sender).call{value: bal}("");
        require(ok, "ETH transfer failed");
    }

    // Admin controls
    function pause() external onlyOwner { _pause(); }
    function unpause() external onlyOwner { _unpause(); }
    function setURI(string memory newuri) external onlyOwner { _setURI(newuri); } // –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ ‚Äî –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ freeze

    // ERC overrides
    function supportsInterface(bytes4 iid) public view override(ERC1155, ERC2981) returns (bool) {
        return ERC1155.supportsInterface(iid) || ERC2981.supportsInterface(iid);
    }

    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids,
        uint256[] memory amounts, bytes memory data
    ) internal override(ERC1155, ERC1155Supply) whenNotPaused {
        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
    }

    receive() external payable {}
}

–§–∞–±—Ä–∏–∫–∞ (Upgradeable) ‚Äî contracts/factory/NiftaFactory.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {UUPSUpgradeable} from "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import {Clones} from "@openzeppelin/contracts/proxy/Clones.sol";

import {INiftaCollection} from "../collection/INiftaCollection.sol";
import {NiftaCollection1155} from "../collection/NiftaCollection1155.sol";
import {CommonEvents} from "../interfaces/CommonEvents.sol";

contract NiftaFactory is UUPSUpgradeable, OwnableUpgradeable, CommonEvents {
    address public implementation;        // –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∫–ª–æ–Ω—ñ–≤
    address public platformReceiver;      // –∫–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
    uint256 public defaultPriceWei;       // 0.0001 ether
    uint256 public defaultTrigger;        // 1000

    function initialize(address implementation_, address platformReceiver_, uint256 defaultPriceWei_, uint256 defaultTrigger_) external initializer {
        __Ownable_init();
        __UUPSUpgradeable_init();
        require(implementation_ != address(0) && platformReceiver_ != address(0), "Zero addr");
        implementation = implementation_;
        platformReceiver = platformReceiver_;
        defaultPriceWei = defaultPriceWei_;
        defaultTrigger = defaultTrigger_ == 0 ? 1000 : defaultTrigger_;
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}

    function setPlatformReceiver(address newReceiver) external onlyOwner {
        require(newReceiver != address(0), "Zero addr");
        platformReceiver = newReceiver;
    }

    function setDefaults(uint256 priceWei, uint256 trigger) external onlyOwner {
        if (priceWei > 0) defaultPriceWei = priceWei;
        if (trigger > 0) defaultTrigger = trigger;
    }

    function createCollection(
        string memory uri,
        uint256 priceWei,              // —è–∫—â–æ 0 ‚Üí default
        uint256 maxPaidMintsTrigger    // —è–∫—â–æ 0 ‚Üí default
    ) external returns (address collection) {
        collection = Clones.clone(implementation);

        INiftaCollection(collection).initialize(
            msg.sender,
            platformReceiver,
            uri,
            priceWei == 0 ? defaultPriceWei : priceWei,
            maxPaidMintsTrigger == 0 ? defaultTrigger : maxPaidMintsTrigger
        );

        emit CollectionCreated(collection, msg.sender, uri, priceWei == 0 ? defaultPriceWei : priceWei);
    }
}

–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (–µ—Ç–∞–ø 1, —Ñ—ñ–∫—Å-–ø—Ä–∞–π—Å) ‚Äî contracts/marketplace/NiftaMarketplace.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import {Pausable} from "@openzeppelin/contracts/utils/Pausable.sol";
import {IERC1155} from "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import {IERC2981} from "@openzeppelin/contracts/interfaces/IERC2981.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

import {CommonEvents} from "../interfaces/CommonEvents.sol";

/**
 * –ü—Ä–æ—Å—Ç–∏–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:
 * - —Ñ—ñ–∫—Å-–ø—Ä–∞–π—Å –ª—ñ—Å—Ç–∏–Ω–≥–∏
 * - —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—É: 95% –ø—Ä–æ–¥–∞–≤—Ü—é, 2.5% —Ä–æ—è–ª—Ç—ñ –∫—Ä—ñ–µ–π—Ç–æ—Ä—É (ERC-2981), 2.5% –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ
 * - –¥–ª—è –æ—Ñ—Ñ–µ—Ä—ñ–≤/–∞—É–∫—Ü—ñ–æ–Ω—ñ–≤ ‚Üí –µ—Ç–∞–ø 2 (Seaport –∞–±–æ –≤–ª–∞—Å–Ω–∞ –ª–æ–≥—ñ–∫–∞)
 */
contract NiftaMarketplace is ReentrancyGuard, Pausable, Ownable, CommonEvents {
    struct Listing {
        address collection;
        uint256 tokenId;
        address seller;
        uint256 amount;
        uint256 unitPrice;
        bool    active;
    }

    address public platformReceiver;
    uint96 public constant PLATFORM_FEE_BPS = 250; // 2.5%

    uint256 public listingCounter;
    mapping(uint256 => Listing) public listings;

    constructor(address platformReceiver_) {
        require(platformReceiver_ != address(0), "Zero addr");
        platformReceiver = platformReceiver_;
    }

    function setPlatformReceiver(address newReceiver) external onlyOwner {
        require(newReceiver != address(0), "Zero addr");
        platformReceiver = newReceiver;
    }

    function pause() external onlyOwner { _pause(); }
    function unpause() external onlyOwner { _unpause(); }

    function list(address collection, uint256 tokenId, uint256 amount, uint256 unitPrice) external whenNotPaused returns (uint256 id) {
        require(amount > 0 && unitPrice > 0, "Bad params");
        IERC1155(collection).safeTransferFrom(msg.sender, address(this), tokenId, amount, "");
        id = ++listingCounter;
        listings[id] = Listing(collection, tokenId, msg.sender, amount, unitPrice, true);
        emit Listed(collection, tokenId, msg.sender, amount, unitPrice);
    }

    function cancel(uint256 id) external nonReentrant {
        Listing storage l = listings[id];
        require(l.active, "Inactive");
        require(l.seller == msg.sender, "Not seller");
        l.active = false;
        IERC1155(l.collection).safeTransferFrom(address(this), l.seller, l.tokenId, l.amount, "");
        emit Cancel(l.collection, l.tokenId, l.seller);
    }

    function buy(uint256 id, uint256 amount) external payable nonReentrant whenNotPaused {
        Listing storage l = listings[id];
        require(l.active, "Inactive");
        require(amount > 0 && amount <= l.amount, "Bad amount");
        uint256 total = l.unitPrice * amount;
        require(msg.value == total, "Wrong value");

        // –∑–∞–±–∏—Ä–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ –ø–æ–∫—É–ø—Ü—é
        l.amount -= amount;
        if (l.amount == 0) l.active = false;
        IERC1155(l.collection).safeTransferFrom(address(this), msg.sender, l.tokenId, amount, "");

        // —Ä–æ—è–ª—Ç—ñ –∑–∞ ERC-2981 (–∫—Ä–µ–∞—Ç–æ—Ä—É)
        (address royaltyReceiver, uint256 royaltyAmount) = IERC2981(l.collection).royaltyInfo(l.tokenId, total);

        // –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ 2.5%
        uint256 platformFee = (total * PLATFORM_FEE_BPS) / 10_000;

        // –ø—Ä–æ–¥–∞–≤—Ü—é 95% –º—ñ–Ω—É—Å —Ä–æ—è–ª—Ç—ñ 2.5% —Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ 2.5%
        uint256 sellerProceeds = total - royaltyAmount - platformFee;

        // –≤–∏–ø–ª–∞—Ç–∏
        if (royaltyAmount > 0) {
            (bool ok1, ) = royaltyReceiver.call{value: royaltyAmount}("");
            require(ok1, "Royalty fail");
        }
        (bool ok2, ) = platformReceiver.call{value: platformFee}("");
        require(ok2, "Platform fail");
        (bool ok3, ) = payable(l.seller).call{value: sellerProceeds}("");
        require(ok3, "Seller fail");

        emit Purchase(l.collection, l.tokenId, msg.sender, amount, total);
    }

    // –ø—Ä–∏–π–æ–º ERC1155
    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns (bytes4) {
        return this.onERC1155Received.selector;
    }
    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external pure returns (bytes4) {
        return this.onERC1155BatchReceived.selector;
    }
}

üß™ Hardhat / –¥–µ–ø–ª–æ–π
hardhat.config.ts
import { HardhatUserConfig } from "hardhat/config";
import "@nomicfoundation/hardhat-toolbox";
import "dotenv/config";

const { RPC_BASE_MAINNET, PRIVATE_KEY } = process.env;

const config: HardhatUserConfig = {
  solidity: {
    version: "0.8.24",
    settings: { optimizer: { enabled: true, runs: 200 } }
  },
  networks: {
    base: {
      url: RPC_BASE_MAINNET || "https://mainnet.base.org",
      accounts: PRIVATE_KEY ? [PRIVATE_KEY] : []
    }
  },
  etherscan: {
    apiKey: process.env.ETHERSCAN_API_KEY // BaseScan API key
  }
};

export default config;

scripts/deploy_factory.ts
import { ethers } from "hardhat";

async function main() {
  const platform = process.env.PLATFORM_TREASURY!;
  const priceWei = ethers.parseEther("0.0001");
  const trigger = 1000;

  // –¥–µ–ø–ª–æ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó
  const Coll = await ethers.getContractFactory("NiftaCollection1155");
  const collImpl = await Coll.deploy();
  await collImpl.waitForDeployment();

  // –¥–µ–ø–ª–æ–π —Ñ–∞–±—Ä–∏–∫–∏ (UUPS)
  const Factory = await ethers.getContractFactory("NiftaFactory");
  const factory = await Factory.deploy();
  await factory.waitForDeployment();

  // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–±—Ä–∏–∫–∏
  const tx = await factory.initialize(await collImpl.getAddress(), platform, priceWei, trigger);
  await tx.wait();

  console.log("Collection impl:", await collImpl.getAddress());
  console.log("Factory:", await factory.getAddress());
}

main().catch((e) => { console.error(e); process.exit(1); });

scripts/deploy_marketplace.ts
import { ethers } from "hardhat";

async function main() {
  const platform = process.env.PLATFORM_TREASURY!;
  const M = await ethers.getContractFactory("NiftaMarketplace");
  const m = await M.deploy(platform);
  await m.waitForDeployment();
  console.log("Marketplace:", await m.getAddress());
}
main().catch((e) => { console.error(e); process.exit(1); });

üß≠ Subgraph (The Graph)
subgraph/schema.graphql
type Collection @entity {
  id: ID!
  creator: Bytes!
  uri: String!
  priceWei: BigInt!
  firstPaidMinter: Bytes
  endTime: BigInt
  paidMints: BigInt!
  createdAt: BigInt!
}

type Mint @entity {
  id: ID!
  collection: Collection!
  minter: Bytes!
  tokenId: BigInt!
  amount: BigInt!
  value: BigInt!
  referrer: Bytes
  blockTime: BigInt!
}

type Listing @entity {
  id: ID!
  collection: Bytes!
  tokenId: BigInt!
  seller: Bytes!
  amount: BigInt!
  unitPrice: BigInt!
  active: Boolean!
  createdAt: BigInt!
}

type Purchase @entity {
  id: ID!
  collection: Bytes!
  tokenId: BigInt!
  buyer: Bytes!
  amount: BigInt!
  totalPaid: BigInt!
  blockTime: BigInt!
}

subgraph/subgraph.yaml (—à–∞–±–ª–æ–Ω)
specVersion: 1.0.0
schema:
  file: ./schema.graphql
dataSources:
  - name: NiftaFactory
    kind: ethereum
    network: base
    source:
      address: "0xFactoryAddress"     # –∑–∞–º—ñ–Ω–∏—Ç–∏ –ø—ñ—Å–ª—è –¥–µ–ø–ª–æ—é
      abi: NiftaFactory
      startBlock: 0                   # –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–∏–π
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: typescript
      entities:
        - Collection
      abis:
        - name: NiftaFactory
          file: ../artifacts/contracts/factory/NiftaFactory.sol/NiftaFactory.json
      eventHandlers:
        - event: CollectionCreated(indexed address,indexed address,string,uint256)
          handler: handleCollectionCreated
      file: ./src/mapping.ts

  - name: NiftaCollection1155
    kind: ethereum
    network: base
    source:
      address: "0xCollectionImplementationOrClone" # –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —è–∫ —à–∞–±–ª–æ–Ω dataSourceTemplates
      abi: NiftaCollection1155
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: typescript
      entities:
        - Mint
        - Collection
      abis:
        - name: NiftaCollection1155
          file: ../artifacts/contracts/collection/NiftaCollection1155.sol/NiftaCollection1155.json
      eventHandlers:
        - event: MintPaid(indexed address,indexed address,uint256,uint256,uint256,address)
          handler: handleMintPaid
        - event: FirstPaidMinterSet(indexed address,indexed address)
          handler: handleFirstPaidMinterSet
        - event: TimerStarted(indexed address,uint256)
          handler: handleTimerStarted
      file: ./src/mapping.ts

  - name: NiftaMarketplace
    kind: ethereum
    network: base
    source:
      address: "0xMarketplaceAddress"
      abi: NiftaMarketplace
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: typescript
      entities:
        - Listing
        - Purchase
      abis:
        - name: NiftaMarketplace
          file: ../artifacts/contracts/marketplace/NiftaMarketplace.sol/NiftaMarketplace.json
      eventHandlers:
        - event: Listed(indexed address,uint256,indexed address,uint256,uint256)
          handler: handleListed
        - event: Purchase(indexed address,uint256,indexed address,uint256,uint256)
          handler: handlePurchase
        - event: Cancel(indexed address,uint256,indexed address)
          handler: handleCancel
      file: ./src/mapping.ts

subgraph/src/mapping.ts (—Å–∫–æ—Ä–æ—á–µ–Ω–æ)
import { BigInt, Address } from "@graphprotocol/graph-ts";
import {
  CollectionCreated,
  MintPaid,
  FirstPaidMinterSet,
  TimerStarted,
  Listed,
  Purchase as EvPurchase,
  Cancel
} from "../generated/..."; // –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Ç–∏–ø–∏ –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É ABI

import { Collection, Mint, Listing, Purchase } from "../generated/schema";

export function handleCollectionCreated(event: CollectionCreated): void {
  let id = event.params.collection.toHex();
  let c = new Collection(id);
  c.creator = event.params.creator;
  c.uri = event.params.uri;
  c.priceWei = event.params.priceWei;
  c.paidMints = BigInt.zero();
  c.createdAt = event.block.timestamp;
  c.save();
}

export function handleMintPaid(event: MintPaid): void {
  let cid = event.params.collection.toHex();
  let c = Collection.load(cid);
  if (c == null) return;

  c.paidMints = c.paidMints.plus(BigInt.fromI32(event.params.amount as i32));
  c.save();

  let m = new Mint(event.transaction.hash.toHex() + "-" + event.logIndex.toString());
  m.collection = cid;
  m.minter = event.params.minter;
  m.tokenId = BigInt.fromI32(event.params.id as i32);
  m.amount = BigInt.fromI32(event.params.amount as i32);
  m.value = BigInt.fromI32(event.params.value as i32);
  m.referrer = event.params.referrer;
  m.blockTime = event.block.timestamp;
  m.save();
}

export function handleFirstPaidMinterSet(event: FirstPaidMinterSet): void {
  let cid = event.params.collection.toHex();
  let c = Collection.load(cid);
  if (c == null) return;
  c.firstPaidMinter = event.params.firstMinter;
  c.save();
}

export function handleTimerStarted(event: TimerStarted): void {
  let cid = event.params.collection.toHex();
  let c = Collection.load(cid);
  if (c == null) return;
  c.endTime = event.params.endTime;
  c.save();
}

// Marketplace
export function handleListed(event: Listed): void {
  let id = event.transaction.hash.toHex() + "-" + event.logIndex.toString();
  let l = new Listing(id);
  l.collection = event.params.collection;
  l.tokenId = BigInt.fromI32(event.params.tokenId as i32);
  l.seller = event.params.seller;
  l.amount = BigInt.fromI32(event.params.amount as i32);
  l.unitPrice = BigInt.fromI32(event.params.unitPrice as i32);
  l.active = true;
  l.createdAt = event.block.timestamp;
  l.save();
}

export function handlePurchase(event: EvPurchase): void {
  let p = new Purchase(event.transaction.hash.toHex() + "-" + event.logIndex.toString());
  p.collection = event.params.collection;
  p.tokenId = BigInt.fromI32(event.params.tokenId as i32);
  p.buyer = event.params.buyer;
  p.amount = BigInt.fromI32(event.params.amount as i32);
  p.totalPaid = BigInt.fromI32(event.params.totalPaid as i32);
  p.blockTime = event.block.timestamp;
  p.save();
}

export function handleCancel(event: Cancel): void {
  // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π Listing —è–∫ inactive ‚Äî —è–∫—â–æ –∑–±–µ—Ä—ñ–≥–∞—î—Ç–µ by key, –æ–Ω–æ–≤—ñ—Ç—å –ø–æ–ª–µ active=false
}


–ü—Ä–∏–º—ñ—Ç–∫–∞: —É —Ä–µ–∞–ª—å–Ω–æ–º—É —Å—É–±–≥—Ä–∞—Ñ—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π —Ç—Ä–µ–±–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ graph codegen, –∞ –≤–µ–ª–∏—á–∏–Ω–∏ uint256 –Ω–µ —Ç—Ä–µ–±–∞ –∫–∞—Å—Ç–∏—Ç–∏ –¥–æ i32; —É –ø—Ä–∏–∫–ª–∞–¥—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–æ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ ‚Äî —É –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ BigInt.fromUnsignedBytes/BigInt.fromString –∑–∞ —Ñ–∞–∫—Ç–æ–º —Ç–∏–ø—ñ–≤, —è–∫—ñ –∑–≥–µ–Ω–µ—Ä—É—î graph-cli.

üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥ (apps/web)
apps/web/package.json
{
  "name": "nifta-web",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "^14.2.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "viem": "^2.9.0",
    "wagmi": "^2.12.0",
    "@rainbow-me/rainbowkit": "^2.1.5",
    "graphql-request": "^7.0.1"
  }
}

apps/web/src/lib/chains.ts
import { defineChain } from 'viem';
export const base = defineChain({
  id: 8453,
  name: 'Base',
  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },
  rpcUrls: { default: { http: ['https://mainnet.base.org'] } },
  blockExplorers: { default: { name: 'BaseScan', url: 'https://basescan.org' } }
});

apps/web/src/lib/wagmi.ts
import { getDefaultConfig } from '@rainbow-me/rainbowkit';
import { createConfig } from 'wagmi';
import { base } from './chains';

export const wagmiConfig = createConfig(
  getDefaultConfig({
    appName: 'NiFTa',
    projectId: process.env.NEXT_PUBLIC_WC_PROJECT_ID || 'demo',
    chains: [base],
    ssr: true
  })
);

–ü—Ä–æ–≤–∞–π–¥–µ—Ä –≥–∞–º–∞–Ω—Ü—è ‚Äî apps/web/src/components/wallet/WalletProvider.tsx
'use client';
import '@rainbow-me/rainbowkit/styles.css';
import { RainbowKitProvider } from '@rainbow-me/rainbowkit';
import { WagmiProvider } from 'wagmi';
import { wagmiConfig } from '@/lib/wagmi';

export default function WalletProvider({ children }: { children: React.ReactNode }) {
  return (
    <WagmiProvider config={wagmiConfig}>
      <RainbowKitProvider modalSize="compact">{children}</RainbowKitProvider>
    </WagmiProvider>
  );
}

–ë–∞–∑–æ–≤–∏–π Layout ‚Äî apps/web/src/app/layout.tsx
import type { Metadata } from 'next';
import WalletProvider from '@/components/wallet/WalletProvider';
import './globals.css';

export const metadata: Metadata = { title: 'NiFTa', description: 'Mint & trade ERC1155 on Base' };

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body><WalletProvider>{children}</WalletProvider></body>
    </html>
  );
}

–ì–æ–ª–æ–≤–Ω–∞ (Trending) ‚Äî apps/web/src/app/page.tsx
export default async function Page() {
  // TODO: –≤–∏—Ç—è–≥–Ω—É—Ç–∏ —Ç–æ–ø–∏ —ñ–∑ —Å—É–±–≥—Ä–∞—Ñ–∞ –ø–æ –≤—ñ–∫–Ω–∞—Ö 5m/1h/24h/7d
  return (
    <main className="mx-auto max-w-6xl p-6">
      <h1 className="text-3xl font-semibold">NiFTa ‚Äî Trending</h1>
      <p className="mt-2 text-gray-600">Top 10 in 5m, 1h, 24h, 7d (coming soon)</p>
    </main>
  );
}

üìù README (—É—Ä–∏–≤–æ–∫)

–ö–æ–Ω—Ç—Ä–∞–∫—Ç–∏:

NiftaCollection1155 ‚Äî ERC-1155 –∑ –ª–æ–≥—ñ–∫–æ—é –º—ñ–Ω—Ç—É, —Ç—Ä–∏–≥–µ—Ä 1000 –ø–ª–∞—Ç–Ω–∏—Ö –º—ñ–Ω—Ç—ñ–≤ ‚Üí endTime = now + 48h, pull-–≤–∏–ø–ª–∞—Ç–∏.

NiftaFactory (UUPS) ‚Äî —Å—Ç–≤–æ—Ä—é—î –∫–ª–æ–Ω–∏ –∫–æ–ª–µ–∫—Ü—ñ—ó (OZ Clones), —Ç—Ä–∏–º–∞—î –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (—Ü—ñ–Ω–∞, —Ç—Ä–∏–≥–µ—Ä, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞).

NiftaMarketplace ‚Äî –ø—Ä–æ—Å—Ç–∏–π —Ñ—ñ–∫—Å-–ø—Ä–∞–π—Å –º–∞—Ä–∫–µ—Ç (95% –ø—Ä–æ–¥–∞–≤—Ü—é, 2.5% —Ä–æ—è–ª—Ç—ñ –∫—Ä—ñ–µ–π—Ç–æ—Ä—É —á–µ—Ä–µ–∑ ERC-2981, 2.5% –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ).

–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏ –º—ñ–Ω—Ç—ñ: Creator 50%, FirstPaidMinter 10%, Referral 20% (—è–∫—â–æ –Ω–µ–º–∞—î ‚Äî –π–¥–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ), Platform 20% (–∞–±–æ 40% –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞).

–†–æ—è–ª—Ç—ñ: 2.5% –∫—Ä—ñ–µ–π—Ç–æ—Ä—É (ERC-2981), —â–µ 2.5% ‚Äî –≤–Ω—É—Ç—Ä—ñ—à–Ω—î –ø—Ä–∞–≤–∏–ª–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É.

–Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è: The Graph (schema + –º–µ–ø–ø—ñ–Ω–≥–∏).

–§—Ä–æ–Ω—Ç–µ–Ω–¥: Next.js + RainbowKit/wagmi/viem, —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Trending/Explore/For Sale/Create.

–õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫
pnpm i
pnpm -C apps/web i
cp .env.example .env
cp apps/web/.env.local.example apps/web/.env.local

pnpm chain            # hardhat node
pnpm test             # —Ç–µ—Å—Ç–∏
pnpm dev:web          # —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥

üîÑ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏

–ó–∞–º—ñ–Ω–∞ pull-–±–∞–ª–∞–Ω—Å—ñ–≤ –Ω–∞ 0xSplits (–æ–ø—Ü—ñ—è): –∑–º–µ–Ω—à–∏—Ç—å –∫–æ–¥ —É –∫–æ–ª–µ–∫—Ü—ñ—ó –π –∑—Ä–æ–±–∏—Ç—å –≤–∏–ø–ª–∞—Ç–∏ –ø—Ä–æ–∑–æ—Ä—ñ—à–∏–º–∏.

–î–æ–¥–∞—Ç–∏ dataSourceTemplates —É —Å—É–±–≥—Ä–∞—Ñ—ñ –¥–ª—è –∞–≤—Ç–æ–ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó, —â–æ —Å—Ç–≤–æ—Ä—é—î —Ñ–∞–±—Ä–∏–∫–∞.

–°—Ç–≤–æ—Ä–∏—Ç–∏ UI –¥–ª—è Create/Mint/List/Sell: —Ñ–æ—Ä–º–∏, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —Ç–∞–π–º–µ—Ä–∏, —Ä–µ—Ñ-–ª—ñ–Ω–∫–∏ ?ref=0x....

Farcaster Mini App: endpoint –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π–Ω–æ–≥–æ mint-action (–ø—ñ–∑–Ω—ñ—à–µ –¥–æ–¥–∞–º–æ –ø—Ä–∏–∫–ª–∞–¥ –∑ Neynar).

–í–∞–ª—ñ–¥–∞—Ü—ñ—è IPFS URI —Ç–∞ –æ–ø—Ü—ñ—è freeze metadata.

–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ –Ω–∞ BaseScan —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å —É .env/–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞.

–•–æ—á–µ—Ç–µ, —â–æ–± —è –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞ –≤—Å–µ —Ü–µ –≤ –æ–¥–Ω–æ–º—É –∞—Ä—Ö—ñ–≤—ñ/—Ñ–∞–π–ª–∞—Ö (–≥–æ—Ç–æ–≤—ñ —Ç–µ–∫—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤/–∫–æ–Ω—Ñ—ñ–≥–∏/subgraph/Next)? –Ø–∫—â–æ —Ç–∞–∫ ‚Äî —Å–∫–∞–∂—ñ—Ç—å, —ñ —è –≤—ñ–¥–¥–∞–º —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –ø–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏ (–º–æ–∂–µ–º–æ –≤—ñ–¥—Ä–∞–∑—É –¥–æ–¥–∞—Ç–∏ —â–µ –∫–æ–Ω—Ñ—ñ–≥–∏ ESLint/Prettier —Ç–∞ action –¥–ª—è CI).